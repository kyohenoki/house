loader: glob({ pattern: '**/*.json', base: './src/content/tags' }),

loader: async () => {
  return await getk('kizis.json')
},

loader: async () => {
  return await getk('tags.json')
},

---

loader: getk({
  json: 'kizis.json'
})

---

import { type Loader, type LoaderContext } from 'astro/loaders'

export const awesomeLoader = (options: { yourApiOptions: string }): Loader => {
  const schema = /* メタデータのスキーマ定義 */
  const load = /* データ取得処理 */
  return { name: 'awesomeLoader', schema, load }
}

---

const load = async (context: LoaderContext) => {
  // 1. データを取得し、必要に応じて加工する
  const apiUrl = 'https://...'
  const data = await fetch(apiUrl)
  const json = await data.json()

  // 2. 取得したデータのバリデーションを行う
  const parsedData = await context.parseData(json)

  // 3. データをStoreに保存する
  const store = context.store
  store.set({
    id: parsedData.id
    data: parsedData,
    rendered: {
      html: parseData.body
    }
  })
}

// http://127.0.0.1:4566/{bucket}/{key}

---

const data = { path: [] as { id: string; path: string }[] }

data.path.push({ id: "123", path: "../content/kiroku/ab.mdx" })
data.path.push({ id: "456", path: "../content/kiroku/cd.mdx" })

console.log(JSON.stringify(data, null, 2))
