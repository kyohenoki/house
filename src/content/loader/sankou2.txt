// src/content.config.ts
import { defineCollection } from "astro:content";
import type { Loader } from "astro/loaders";
import { z } from "astro:content";

type ArticleMeta = {
  id: string;
  title: string;
  slug: string;
  // 他に date や tags 等
};

type ArticleFull = ArticleMeta & {
  body: string;  // Markdown 本体
};

const blogLoader: Loader = {
  name: "remote-blog-loader",
  load: async ({ config, store, parseData, generateDigest, entryTypes }) => {
    // （1）既存ストアをクリア（dev 時や再読み込み時に）
    store.clear();

    // （2）一覧を取る
    const listRes = await fetch("https://api.example.com/articles");
    if (!listRes.ok) {
      throw new Error("Failed to fetch article list");
    }
    const listJson: ArticleMeta[] = await listRes.json();

    // （3）各エントリを並列 fetch
    const fulls: ArticleFull[] = await Promise.all(
      listJson.map(async (meta) => {
        const detailRes = await fetch(`https://api.example.com/articles/${meta.id}`);
        if (!detailRes.ok) {
          throw new Error(`Failed to fetch article ${meta.id}`);
        }
        const detailJson = await detailRes.json();
        // assume detailJson has `body` field (Markdown)
        return {
          ...meta,
          body: detailJson.body,
        };
      })
    );

    // （4）store にセット
    for (const article of fulls) {
      // parse metadata via parseData
      // parseData は { id, data } を受け入れる型
      const parsed = await parseData({ id: article.id, data: article });
      const digest = generateDigest(parsed);
      // Markdown → HTML 変換（もし必要ななら）をやる
      let rendered = undefined;
      const markdownType = entryTypes.get(".md");
      if (markdownType?.getRenderFunction) {
        const render = await markdownType.getRenderFunction(config);
        rendered = await render?.({
          id: article.id,
          data: parsed.data,
          body: article.body,
          digest,
        });
      }
      // 最終セット
      store.set({
        id: article.id,
        data: parsed.data,
        rendered,
        digest,
      });
    }
  },
};

const blogCollection = defineCollection({
  loader: blogLoader,
  schema: z.object({
    id: z.string(),
    title: z.string(),
    slug: z.string(),
    body: z.string(),
    // date, tags, etc.
  }),
});

export const collections = {
  blog: blogCollection,
};

---

import type { Loader } from "astro/loaders";
import { z } from "astro:content";

export const morau = (options: { list: string }): Loader => {
  const schema = z.object({
    id: z.string(),
    body: z.string(),
  });

  return {
    name: "morau",
    schema, // defineCollection に schema を渡したい場合
    load: async ({ config, store, parseData, generateDigest }) => {
      // options.list をクロージャで参照できる
      const url = options.list;

      const res = await fetch(url);
      const list: { id: string; body: string }[] = await res.json();

      for (const item of list) {
        const parsed = await parseData({ id: item.id, data: item });
        const digest = generateDigest(parsed);

        store.set({
          id: item.id,
          data: parsed.data,
          digest,
        });
      }
    },
  };
};
